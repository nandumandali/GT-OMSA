tapply(flags$animate,flags$landmass,mean)
tapply(flags$population,flags$red,summary)
tapply(flags$population,flags$landmass,summary)
ls(plants)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
rm(list=ls())
library(datasets)
library(kknn)
library(ggplot2)
head(iris)
set.seed(20)
ggplot(iris, aes(Petal.Length,Petal.Width, color =Species)) + geom_point()
irisCluster <- kmeans(iris[,3:4], 3, nstart=20)
table(iriscluster$cluster)
table(irisCluster$cluster)
irisCluster
?apply
apply(iris,2,var)
sum(apply(iris,2,var))
(nrow(iris)-1)*sum(apply(iris,2,var))
iriscluster$withinss
irisCluster$withinss
ssplot <- function(iris, nc=15, seed=1234){
wss <- (nrow(iris)-1)*sum(apply(iris,2,var))
for (i in 2:nc){
set.seed(seed)
wss[i] <- sum(kmeans(data, centers=i)$withinss)}
plot(1:nc, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")}
rm(list=ls())
library(datasets)
library(kknn)
library(ggplot2)
head(iris)
set.seed(20)
ggplot(iris, aes(Petal.Length,Petal.Width, color =Species)) + geom_point()
irisCluster <- kmeans(iris[,3:4], 3, nstart=20)
ssplot <- function(iris, nc=15, seed=1234){
wss <- (nrow(iris)-1)*sum(apply(iris,2,var))
for (i in 2:nc){
set.seed(seed)
wss[i] <- sum(kmeans(data, centers=i)$withinss)}
plot(1:nc, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")}
wss
ssplot
ssplot(iris,10)
library(kknn)
library(ggplot2)
my_iris <- iris[-5]
rm(list=ls())
library(datasets)
library(kknn)
library(ggplot2)
my_iris <- iris[-5]
class(my_iris)
set.seed(20)
ggplot(iris, aes(Petal.Length,Petal.Width, color =Species)) + geom_point()
irisCluster <- kmeans(my_iris[,3:4], 3, nstart=20)
irisCluster
irisCluster$cluster
table(irisCluster$cluster, iris$Species)
ssplot <- function(my_iris, nc=15, seed=1234){
wss <- (nrow(iris)-1)*sum(apply(my_iris,2,var))
for (i in 2:nc){
set.seed(seed)
wss[i] <- sum(kmeans(my_iris, centers=i)$withinss)}
plot(1:nc, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")}
wss
wss <- (nrow(my_iris)-1)*sum(apply(my_iris,2,var))
wss
apply(my_iris,2,var)
sum(apply(my_iris,2,var))
class(wss)
type(wss)
for (i in 2:10){
set.seed(1000)
wss[i] <- sum(kmeans(my_iris, centers=i)$withinss)}
wss
plot(2:10, wss)
plot(1:10, wss)
plot(1:10, wss, type="b")
ssplot <- function(my_iris, nc=15, seed=1234){
#wss <- (nrow(my_iris)-1)*sum(apply(my_iris,2,var))
for (i in 2:nc){
set.seed(seed)
wss[i] <- sum(kmeans(my_iris, centers=i)$withinss)}
plot(1:nc, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")}
wss
rm(list=ls())
library(datasets)
library(kknn)
library(ggplot2)
my_iris <- iris[-5]
head(iris)
set.seed(20)
ggplot(iris, aes(Petal.Length,Petal.Width, color =Species)) + geom_point()
library(kknn)
mydata<-read.table("https://d37djvu3ytnwxt.cloudfront.net/assets/courseware/v1/e39a3df780dacd5503df6a8322d72cd2/asset-v1:GTx+ISYE6501x+3T2017+type@asset+block/credit_card_data-headers.txt", header =T, sep='\t')
m <- nrow(mydata)
predicted <- rep(0,(m))
for (i in 1:m){
# Call kknn function
model <- kknn(mydata[-i,11]~., mydata[-i,1:10], mydata[i,1:10], k=5, kernel="optimal",scale=TRUE)
#Use round function to convert continuous values to discrete 1's or 0's
predicted[i] <- round(fitted(model))
}
print(sum(predicted == mydata[,11]) / nrow(mydata))
rm(list=ls())
library(datasets)
library(kknn)
library(ggplot2)
my_iris <- iris[-5]
head(iris)
set.seed(20)
ggplot(iris, aes(Petal.Length,Petal.Width, color =Species)) + geom_point()
irisCluster <- kmeans(my_iris[,3:4], 3, nstart=20)
nc <- 10
for (i in 2:nc){
set.seed(seed)
wss[i] <- sum(kmeans(my_iris, centers=i)$withinss)}
for (i in 2:nc){
set.seed(100)
wss[i] <- sum(kmeans(my_iris, centers=i)$withinss)}
nc <- 10
wass <- list()
for (i in 2:nc){
set.seed(100)
wss[i] <- sum(kmeans(my_iris, centers=i)$withinss)}
nc <- 10
wass <- c()
for (i in 2:nc){
set.seed(100)
wss[i] <- sum(kmeans(my_iris, centers=i)$withinss)}
wass <- c(rep(0,nc))
wss <- c(rep(0,nc))
for (i in 2:nc){
set.seed(100)
wss[i] <- sum(kmeans(my_iris, centers=i)$withinss)}
plot(1:nc, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
rm(list=ls())
library(datasets)
library(kknn)
library(ggplot2)
my_iris <- iris[-5]
head(iris)
set.seed(20)
ggplot(iris, aes(Petal.Length,Petal.Width, color =Species)) + geom_point()
irisCluster <- kmeans(my_iris[,3:4], 3, nstart=20)
nc <- 10
wss <- (nrow(my_iris)-1)*sum(apply(my_iris,2,var))
for (i in 2:nc){
set.seed(100)
wss[i] <- sum(kmeans(my_iris, centers=i)$withinss)}
plot(1:nc, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
irisCluster <- kmeans(my_iris[,3:4], 4, nstart=20)
irisCluster
irisCluster$cluster
table(irisCluster$cluster,iris$Species)
view(iris)
View(iris)
rm(list=ls())
library(datasets)
library(kknn)
library(ggplot2)
my_iris <- iris[-5]
head(iris)
set.seed(100)
nc <- 15
wss <- (nrow(my_iris)-1)*sum(apply(my_iris,2,var))
for (i in 2:nc){
wss[i] <- sum(kmeans(my_iris, centers=i)$withinss)}
plot(1:nc, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
irisCluster <- kmeans(my_iris, 6, nstart=20)
table(irisCluster$cluster,iris$Species)
irisCluster
irisCluster <- kmeans(my_iris, 7, nstart=20)
irisCluster
table(irisCluster$cluster,iris$Species)
rm(list=ls())
library(datasets)
my_iris <- iris[-5]
set.seed(100)
nc <- 15
dist <- (nrow(my_iris)-1)*sum(apply(my_iris,2,var))
for (i in 2:nc){
dist[i] <- sum(kmeans(my_iris, centers=i)$withinss)}
plot(1:nc, dist, type="b", xlab="Number of Clusters",
ylab="Total Distance")
irisCluster <- kmeans(my_iris, 7, nstart=20)
table(irisCluster$cluster,iris$Species)
rm(list=ls())
library(kernlab)
library(kknn)
mydata <- read.table("https://d37djvu3ytnwxt.cloudfront.net/assets/courseware/v1/e39a3df780dacd5503df6a8322d72cd2/asset-v1:GTx+ISYE6501x+3T2017+type@asset+block/credit_card_data-headers.txt", header = TRUE)
head(mydata)
set.seed(1)
kfolds <- c(2,3,4,5,8,10,15,20)
kvalues <- c(2,3,4,5,8,10,12,15,20)
acc <- matrix(nrow=8,ncol=9)
for (i in 1:length(kfolds)) {
for (j in 1:length(kvalues))
{
model_kknn <- cv.kknn(R1~.,mydata,kcv=kfolds[i],k=kvalues[j],scale=TRUE)
# Converting the output model into dataframe
results <- as.data.frame(model_kknn)
# round off to 0 or 1
fit <- round(results$yhat)
# Calculate the fraction of correct predictions
acc[i,j]<- sum(mydata$R1==fit)/nrow(mydata)
}
}
acc
range(acc)
acc_kknn <- list()
acc_ksvm <- list()
acc_ksvm <- unlist(acc_ksvm)
mean(acc_kknn)
mean(acc_ksvm)
model_final <- ksvm(as.matrix(tv_data[,1:10]), tv_data[,11], type="C-svc", kernel= "vanilladot", C=100, scaled=TRUE)
predicted_model <- predict(model_cv.ksvm,test_data[,1:10])
range(acc)
acc_kknn <- list()
acc_ksvm <- list()
rowindices <- sample(1:nrow(mydata), round(.8*nrow(mydata)), replace=FALSE)
tv_data <- mydata[rowindices,]
test_data <- mydata[-rowindices,]
tv_data<-tv_data[sample(nrow(tv_data)),]
folds <- cut(seq(1,nrow(tv_data)),breaks=10,labels=FALSE)
for(i in 1:10){
#Segement your data by fold using the which() function
testIndexes <- which(folds==i,arr.ind=TRUE)
validData <- tv_data[testIndexes, ]
trainData <- tv_data[-testIndexes, ]
# Cross validation of kknn model. k value of 15 is chosen based on HW1
model_cv.kknn <- kknn(R1~.,trainData,validData,k=15,scale=TRUE)
predicted_kknn<- as.integer(fitted(model_cv.kknn)+0.5)
acc_kknn[i]<- (sum(predicted_kknn == validData[,11])/nrow(validData))
# Cross validation of ksvm model. C value of 100 is chosen based on HW1
model_cv.ksvm <- ksvm(as.matrix(trainData[,1:10]), trainData[,11], type="C-svc", kernel= "vanilladot", C=100, scaled=TRUE)
predicted_ksvm <- predict(model_cv.ksvm,validData[,1:10])
acc_ksvm[i]<- (sum(predicted_ksvm == validData[,11])/nrow(validData))
}
acc_kknn <- unlist(acc_kknn)
acc_ksvm <- unlist(acc_ksvm)
mean(acc_kknn)
mean(acc_ksvm)
model_final <- ksvm(as.matrix(tv_data[,1:10]), tv_data[,11], type="C-svc", kernel= "vanilladot", C=100, scaled=TRUE)
predicted_model <- predict(model_cv.ksvm,test_data[,1:10])
model_accuracy<- (sum(predicted_model == test_data[,11])/nrow(test_data))
model_accuracy
rm(list=ls())
library(datasets)
my_iris <- iris[-5]
set.seed(100)
nc <- 15
dist <- (nrow(my_iris)-1)*sum(apply(my_iris,2,var))
for (i in 2:nc){
dist[i] <- sum(kmeans(my_iris[,3:4], centers=i)$withinss)}
plot(1:nc, dist, type="b", xlab="Number of Clusters",
ylab="Total Distance")
irisCluster <- kmeans(my_iris[,3:4], 7, nstart=20)
table(irisCluster$cluster,iris$Species)
irisCluster
rm(list=ls())
library(datasets)
my_iris <- iris[-5]
set.seed(100)
nc <- 15
dist <- (nrow(my_iris)-1)*sum(apply(my_iris,2,var))
for (i in 2:nc){
dist[i] <- sum(kmeans(my_iris, centers=i)$withinss)}
plot(1:nc, dist, type="b", xlab="Number of Clusters",
ylab="Total Distance")
irisCluster <- kmeans(my_iris, 7, nstart=20)
table(irisCluster$cluster,iris$Species)
irisCluster
irisCluster$betweenss/irisCluster$tot.withinss
irisCluster$betweenss
irisCluster$tot.withinss
irisCluster$withinss
irisCluster$totss
irisCluster$betweenss/irisCluster$totss
rm(list=ls())
library(datasets)
my_iris <- iris[-5]
set.seed(100)
nc <- 15
dist <- (nrow(my_iris)-1)*sum(apply(my_iris,2,var))
for (i in 2:nc){
dist[i] <- sum(kmeans(my_iris[,3:4], centers=i)$withinss)}
plot(1:nc, dist, type="b", xlab="Number of Clusters",
ylab="Total Distance")
irisCluster <- kmeans(my_iris[,3:4], 7, nstart=20)
table(irisCluster$cluster,iris$Species)
irisCluster$betweenss/irisCluster$totss
rm(list=ls())
library(datasets)
my_iris <- iris[-5]
set.seed(100)
nc <- 15
dist <- (nrow(my_iris)-1)*sum(apply(my_iris,2,var))
for (i in 2:nc){
dist[i] <- sum(kmeans(my_iris[,1:2], centers=i)$withinss)}
plot(1:nc, dist, type="b", xlab="Number of Clusters",
ylab="Total Distance")
irisCluster <- kmeans(my_iris[,1:2], 7, nstart=20)
table(irisCluster$cluster,iris$Species)
irisCluster$betweenss/irisCluster$totss
irisCluster
irisCluster$withinss
irisCluster <- kmeans(my_iris[,1:2], 3, nstart=20)
table(irisCluster$cluster,iris$Species)
irisCluster <- kmeans(my_iris[,3,4], 3, nstart=20)
table(irisCluster$cluster,iris$Species)
irisCluster
irisCluster4 <- kmeans(my_iris[,3:4], 3, nstart=20)
rm(list=ls())
library(datasets)
my_iris <- iris[-5]
set.seed(100)
nc <- 15
dist <- (nrow(my_iris)-1)*sum(apply(my_iris,2,var))
for (i in 2:nc){
dist[i] <- sum(kmeans(my_iris, centers=i)$withinss)}
plot(1:nc, dist, type="b", xlab="Number of Clusters",
ylab="Total Distance")
irisCluster1 <- kmeans(my_iris, 7, nstart=20)
table(irisCluster1$cluster,iris$Species)
irisCluster2 <- kmeans(my_iris[,3:4], 7, nstart=20)
table(irisCluster2$cluster,iris$Species)
irisCluster3 <- kmeans(my_iris[,1:2], 7, nstart=20)
table(irisCluster3$cluster,iris$Species)
irisCluster4 <- kmeans(my_iris[,3:4], 3, nstart=20)
table(irisCluster3$cluster,iris$Species)
table(irisCluster4$cluster,iris$Species)
rm(list = ls())
library(outliers)
my_data <- read.table("http://www.statsci.org/data/general/uscrime.txt", header = TRUE)
head(my_data)
shapiro.test(my_Data$Crime)
shapiro.test(my_data$Crime)
qqnorm(my_data$Crime)
my_data$Crime
my_data$Crime[-4]
grubbs.test(my_data$Crime[-4], type=10,opposite=FALSE,two.sided=FALSE)
grubbs.test(my_data$Crime[-25], type=10,opposite=FALSE,two.sided=FALSE)
grubbs.test(my_data$Crime, type=10,opposite=TRUE,two.sided=FALSE)
rm(list = ls())
setwd("C:/Users/yoganandm/Desktop/GT OMSA/ISYE 6501/R Dir/HW4")
summer_data <- read.csv("temps.csv", header = TRUE)
summer_data_mtx <- as.vector(unlist(summer_data[,-1]))
summer_data_ts <- ts(summer_data_mtx, frequency = 123, start = 1996, end=2015)
plot.ts(summer_data_ts)
summer_forecast <- HoltWinters(summer_data_ts, alpha= 0.03, seasonal="additive")
plot(summer_forecast)
summer_forecast
summer_forecast <- HoltWinters(summer_data_ts, alpha= 0.03, beta=0.06, seasonal="additive")
plot(summer_forecast)
summer_forecast
summer_forecast <- HoltWinters(summer_data_ts, seasonal="additive")
plot(summer_forecast)
rm(list = ls())
setwd("C:/Users/yoganandm/Desktop/GT OMSA/ISYE 6501/R Dir/HW4")
summer_data <- read.csv("temps.csv", header = TRUE)
summer_data_mtx <- as.vector(unlist(summer_data[,-1]))
summer_data_ts <- ts(summer_data_mtx, frequency = 123, start = 1996, end=2015)
plot.ts(summer_data_ts)
summer_forecast <- HoltWinters(summer_data_ts, alpha= 0.03, seasonal="multiplicative")
plot(summer_forecast)
summer_forecast
summer_forecast <- HoltWinters(summer_data_ts, alpha= 0.03, beta=0.06, seasonal="multiplicative")
plot(summer_forecast)
summer_forecast
summer_forecast <- HoltWinters(summer_data_ts, seasonal="multiplicative")
plot(summer_forecast)
rm(list = ls())
setwd("C:/Users/yoganandm/Desktop/GT OMSA/ISYE 6501/R Dir/HW4")
summer_data <- read.csv("temps.csv", header = TRUE)
summer_data_mtx <- as.vector(unlist(summer_data[,-1]))
summer_data_ts <- ts(summer_data_mtx, frequency = 123, start = 1996, end=2015)
summer_forecast <- HoltWinters(summer_data_ts, seasonal="multiplicative")
plot(summer_forecast)
summer_forecast
summer_forecast
series <- summer_forecast$fitted[,4]
smoothed <- matrix(c(series[-1]),123,18, byrow = FALSE)
seasonMatrix = as.data.frame(t(matrix(c(series[-1]), 123)))
write.table(seasonMatrix, "outseason.csv", FALSE, TRUE, ",")
write.table(seasonMatrix, "outseason.csv", FALSE, TRUE, ",")
rm(list = ls())
setwd("C:/Users/yoganandm/Desktop/GT OMSA/ISYE 6501/R Dir/HW4")
summer_data <- read.csv("temps.csv", header = TRUE)
summer_data_mtx <- as.vector(unlist(summer_data[,-1]))
summer_data_ts <- ts(summer_data_mtx, frequency = 123, start = 1996, end=2015)
plot.ts(summer_data_ts)
summer_forecast <- HoltWinters(summer_data_ts, seasonal="additive")
plot(summer_forecast)
summer_forecast
series <- summer_forecast$fitted[,4]
smoothed <- matrix(c(series[-1]),123,18, byrow = FALSE)
seasonMatrix = as.data.frame(t(matrix(c(series[-1]), 123)))
write.table(seasonMatrix, "outseason.csv", FALSE, TRUE, ",")
summer_forecast <- HoltWinters(summer_data_ts, alpha= 0.03, seasonal="additive")
plot(summer_forecast)
summer_forecast
summer_forecast <- HoltWinters(summer_data_ts, alpha= 0.03, beta=0.06, seasonal="additive")
plot(summer_forecast)
summer_forecast
rm(list = ls())
rm(list = ls())
setwd("C:/Users/yoganandm/Desktop/GT OMSA/ISYE 6501/R Dir/HW4")
summer_data <- read.csv("temps.csv", header = TRUE)
summer_data_mtx <- as.vector(unlist(summer_data[,-1]))
summer_data_ts <- ts(summer_data_mtx, frequency = 123, start = 1996, end=2015)
plot.ts(summer_data_ts)
summer_forecast <- HoltWinters(summer_data_ts, alpha= 0.03, seasonal="additive")
plot(summer_forecast)
series <- summer_forecast$fitted[,4]
smoothed <- matrix(c(series[-1]),123,18, byrow = FALSE)
seasonMatrix = as.data.frame(t(matrix(c(series[-1]), 123)))
write.table(seasonMatrix, "outseason.csv", FALSE, TRUE, ",")
rm(list = ls())
setwd("C:/Users/yoganandm/Desktop/GT OMSA/ISYE 6501/R Dir/HW4")
summer_data <- read.csv("temps.csv", header = TRUE)
summer_data_mtx <- as.vector(unlist(summer_data[,-1]))
summer_data_ts <- ts(summer_data_mtx, frequency = 123, start = 1996, end=2015)
plot.ts(summer_data_ts)
summer_forecast <- HoltWinters(summer_data_ts, alpha= 0.03, seasonal="additive")
rm(list = ls())
setwd("C:/Users/yoganandm/Desktop/GT OMSA/ISYE 6501/R Dir/HW4")
summer_data <- read.csv("temps.csv", header = TRUE)
summer_data_mtx <- as.vector(unlist(summer_data[,-1]))
summer_data_ts <- ts(summer_data_mtx, frequency = 123, start = 1996, end=2015)
summer_forecast <- HoltWinters(summer_data_ts, alpha= 0.03, beta=0.06, seasonal="additive")
plot(summer_forecast)
summer_forecast
series <- summer_forecast$fitted[,4]
smoothed <- matrix(c(series[-1]),123,18, byrow = FALSE)
seasonMatrix = as.data.frame(t(matrix(c(series[-1]), 123)))
write.table(seasonMatrix, "outseason.csv", FALSE, TRUE, ",")
rm(list = ls())
setwd("C:/Users/yoganandm/Desktop/GT OMSA/ISYE 6501/R Dir/HW4")
summer_data <- read.csv("temps.csv", header = TRUE)
summer_data_mtx <- as.vector(unlist(summer_data[,-1]))
summer_data_ts <- ts(summer_data_mtx, frequency = 123, start = 1996, end=2015)
plot.ts(summer_data_ts)
summer_forecast <- HoltWinters(summer_data_ts, alpha= 0.03, beta=0.06, seasonal="additive")
plot(summer_forecast)
summer_forecast
series <- summer_forecast$fitted[,4]
smoothed <- matrix(c(series[-1]),123,18, byrow = FALSE)
seasonMatrix = as.data.frame(t(matrix(c(series[-1]), 123)))
write.table(seasonMatrix, "outseason.csv", FALSE, TRUE, ",")
summer_data_mtx <- as.vector(unlist(summer_data[,-1]))
rm(list = ls())
setwd("C:/Users/yoganandm/Desktop/GT OMSA/ISYE 6501/R Dir/HW4")
summer_data <- read.csv("temps.csv", header = TRUE)
summer_data_mtx <- as.vector(unlist(summer_data[,-1]))
summer_data_ts <- ts(summer_data_mtx, frequency = 123, start = 1996, end=2015)
plot.ts(summer_data_ts)
summer_forecast <- HoltWinters(summer_data_ts, seasonal="additive")
plot(summer_forecast)
summer_forecast
series <- summer_forecast$fitted[,4]
smoothed <- matrix(c(series[-1]),123,18, byrow = FALSE)
seasonMatrix = as.data.frame(t(matrix(c(series[-1]), 123)))
write.table(seasonMatrix, "outseason.csv", FALSE, TRUE, ",")
setwd("C:/Users/yoganandm/Desktop/GT OMSA/ISYE 6501/R Dir/HW4")
rm(list = ls())
temp_data <- read.csv("temps.csv", header = TRUE)
temp_data_vct <- as.vector(unlist(temp_data[,-1]))
temp_data_ts <- ts(temp_data_vct, frequency = 123, start = 1996, end=2015)
plot.ts(temp_data_ts)
summer_forecast <- HoltWinters(summer_data_ts, alpha= 0.03, seasonal="additive")
plot(summer_forecast)
summer_forecast
summer_forecast <- HoltWinters(summer_data_ts, alpha= 0.03, beta=0.06, seasonal="additive")
plot(summer_forecast)
summer_forecast
summer_forecast <- HoltWinters(summer_data_ts, seasonal="additive")
plot(summer_forecast)
plot.ts(temp_data_ts)
summer_forecast <- HoltWinters(temp_data_ts, alpha= 0.03, seasonal="additive")
plot(summer_forecast)
summer_forecast
summer_forecast <- HoltWinters(temp_data_ts, alpha= 0.03, beta=0.06, seasonal="additive")
plot(summer_forecast)
summer_forecast <- HoltWinters(temp_data_ts, seasonal="additive")
plot(summer_forecast)
summer_forecast
seasonalfactors <- summer_forecast$fitted[,4]
seasonMatrix = as.data.frame(t(matrix(c(series[-1]), 123)))
seasonMatrix = as.data.frame(t(matrix(c(seasonalfactors[-1]), 123)))
write.table(seasonMatrix, "seasontrend.csv", FALSE, TRUE, ",")
